[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ApiApplication.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/AppTransition.java:49:5: Method main length is 71 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/BatchProcessor.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/cli/CreateOpeningBalance.java:14:5: Method main length is 81 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/config/DatabaseConfig.java:121:52: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/config/DatabaseConfig.java:127:56: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/config/DatabaseConfig.java:93:37: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/config/DatabaseConfig.java:94:46: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/config/DatabaseConfig.java:95:36: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/context/ApplicationContext.java:101:5: Method initializeServices length is 133 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/context/TransactionParsingContext.java:43:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'statementDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'statementDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/context/TransactionParsingContext.java:48:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'accountNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'accountNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/context/TransactionParsingContext.java:53:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'statementPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'statementPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/context/TransactionParsingContext.java:58:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'sourceFile' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'sourceFile' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/context/TransactionParsingContext.java:63:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'build' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'build' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ApplicationController.java:264:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ApplicationController.java:399:69: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ApplicationController.java:93:5: Method start length is 80 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/BudgetController.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/BudgetController.java:266:47: '50' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/BudgetController.java:439:73: '2024' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/BudgetController.java:439:79: '2030' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/BudgetController.java:652:46: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/BudgetController.java:654:107: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/CompanyController.java:119:5: Class 'CompanyController' looks like designed for extension (can be subclassed), but the method 'selectCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyController' final or making the method 'selectCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/CompanyController.java:138:5: Class 'CompanyController' looks like designed for extension (can be subclassed), but the method 'viewCompanyDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyController' final or making the method 'viewCompanyDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/CompanyController.java:147:5: Class 'CompanyController' looks like designed for extension (can be subclassed), but the method 'editCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyController' final or making the method 'editCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/CompanyController.java:190:5: Class 'CompanyController' looks like designed for extension (can be subclassed), but the method 'deleteCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyController' final or making the method 'deleteCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/CompanyController.java:58:5: Class 'CompanyController' looks like designed for extension (can be subclassed), but the method 'handleCompanySetup' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyController' final or making the method 'handleCompanySetup' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/CompanyController.java:89:5: Class 'CompanyController' looks like designed for extension (can be subclassed), but the method 'createCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyController' final or making the method 'createCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:109:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleDataManagement' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleDataManagement' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:152:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleManualInvoiceCreation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleManualInvoiceCreation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:193:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleJournalEntryCreation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleJournalEntryCreation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:193:5: Method handleJournalEntryCreation length is 61 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:255:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleTransactionClassification' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleTransactionClassification' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:255:5: Method handleTransactionClassification length is 75 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:370:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleTransactionCorrection' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleTransactionCorrection' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:370:5: Method handleTransactionCorrection length is 110 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:644:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleTransactionHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleTransactionHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:644:5: Method handleTransactionHistory length is 57 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:702:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleDataReset' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleDataReset' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DataManagementController.java:737:5: Class 'DataManagementController' looks like designed for extension (can be subclassed), but the method 'handleExportToCSV' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DataManagementController' final or making the method 'handleExportToCSV' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:208:22: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:211:22: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:214:22: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:278:5: Method updateAsset length is 52 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:314:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:315:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:316:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:317:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:318:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:319:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:382:22: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:385:22: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:388:22: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:407:22: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/DepreciationController.java:81:5: Method calculateAndSaveDepreciation length is 59 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:108:5: Class 'FiscalPeriodController' looks like designed for extension (can be subclassed), but the method 'selectFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodController' final or making the method 'selectFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:120:79: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:127:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:131:5: Class 'FiscalPeriodController' looks like designed for extension (can be subclassed), but the method 'viewFiscalPeriodDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodController' final or making the method 'viewFiscalPeriodDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:140:5: Class 'FiscalPeriodController' looks like designed for extension (can be subclassed), but the method 'manageFiscalPeriods' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodController' final or making the method 'manageFiscalPeriods' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:140:5: Method manageFiscalPeriods length is 56 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:212:79: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:230:63: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:50:5: Class 'FiscalPeriodController' looks like designed for extension (can be subclassed), but the method 'handleFiscalPeriods' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodController' final or making the method 'handleFiscalPeriods' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/FiscalPeriodController.java:81:5: Class 'FiscalPeriodController' looks like designed for extension (can be subclassed), but the method 'createFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodController' final or making the method 'createFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:105:5: Class 'ImportController' looks like designed for extension (can be subclassed), but the method 'handleBatchBankStatementImport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ImportController' final or making the method 'handleBatchBankStatementImport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:105:5: Method handleBatchBankStatementImport length is 54 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:144:93: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:160:5: Class 'ImportController' looks like designed for extension (can be subclassed), but the method 'handleCsvImport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ImportController' final or making the method 'handleCsvImport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:183:5: Class 'ImportController' looks like designed for extension (can be subclassed), but the method 'handleViewImportedData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ImportController' final or making the method 'handleViewImportedData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:183:5: Method handleViewImportedData length is 56 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:51:5: Class 'ImportController' looks like designed for extension (can be subclassed), but the method 'handleBankStatementImport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ImportController' final or making the method 'handleBankStatementImport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ImportController.java:79:5: Class 'ImportController' looks like designed for extension (can be subclassed), but the method 'handleSingleBankStatementImport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ImportController' final or making the method 'handleSingleBankStatementImport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:100:5: Class 'PayrollController' looks like designed for extension (can be subclassed), but the method 'handlePayrollManagement' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollController' final or making the method 'handlePayrollManagement' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:204:5: Method createEmployee length is 96 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:301:5: Method updateEmployee length is 124 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:555:84: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:645:96: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:647:84: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:691:92: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:829:74: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/PayrollController.java:841:5: Method deletePayslipDocument length is 62 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:120:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateCashbookReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateCashbookReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:140:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateGeneralLedgerReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateGeneralLedgerReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:160:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateTrialBalanceReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateTrialBalanceReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:180:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateIncomeStatementReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateIncomeStatementReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:200:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateBalanceSheetReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateBalanceSheetReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:220:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateCashFlowReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateCashFlowReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:240:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateAuditTrailReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateAuditTrailReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:260:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateAllReports' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateAllReports' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:260:5: Method generateAllReports length is 65 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:326:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'generateCustomReport' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'generateCustomReport' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/controller/ReportController.java:77:5: Class 'ReportController' looks like designed for extension (can be subclassed), but the method 'handleReportGeneration' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReportController' final or making the method 'handleReportGeneration' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/exception/AccountException.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/exception/CategoryException.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/exception/DatabaseException.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/exception/DomainException.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/exception/TransactionMappingException.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:32:96: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:33:70: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:34:96: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:35:14: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:36:87: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:37:14: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:38:24: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:39:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:40:47: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:41:57: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:42:14: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:43:55: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:44:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:45:62: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:46:55: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:47:55: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:48:14: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:49:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:50:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:51:61: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:52:62: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:53:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:54:14: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:55:35: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:56:67: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:57:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:58:14: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/license/LicenseManager.java:86:69: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:104:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getParentAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getParentAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:118:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setParentAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setParentAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:132:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:148:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:164:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:168:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:172:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'isActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'isActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:176:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:180:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:184:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:188:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:192:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:196:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'isDebitAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'isDebitAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:197:70: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:201:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'isCreditAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'isCreditAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:205:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:59:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:63:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:67:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:71:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:75:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:79:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:83:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'getCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'getCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Account.java:91:5: Class 'Account' looks like designed for extension (can be subclassed), but the method 'setCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Account' final or making the method 'setCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:30:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:34:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:38:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getNormalBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getNormalBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:42:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getOpeningBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getOpeningBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:46:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getPeriodDebits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getPeriodDebits' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:50:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getPeriodCredits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getPeriodCredits' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:54:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'getClosingBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'getClosingBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:84:5: Class 'AccountBalance' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountBalance' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountBalance.java:86:90: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:108:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'isActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'isActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:112:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:116:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:120:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:124:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:128:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:132:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:134:35: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:135:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:136:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:137:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:138:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:139:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:140:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:44:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:48:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:52:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:56:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:60:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:64:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:68:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:72:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:76:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'getCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'getCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCategory.java:92:5: Class 'AccountCategory' looks like designed for extension (can be subclassed), but the method 'setCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountCategory' final or making the method 'setCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountCode.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:24:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:28:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'setAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'setAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:32:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:36:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'setAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'setAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:40:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'getNormalBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'getNormalBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:44:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'setNormalBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'setNormalBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:48:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'getAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'getAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:52:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'setAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'setAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/AccountInfo.java:56:5: Class 'AccountInfo' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountInfo' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:230:5: Method equals length is 63 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:45:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:53:35: 'companyId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:61:37: 'assetCode' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:69:37: 'assetName' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Asset.java:77:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:34:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:35:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:37:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:38:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:40:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getBankAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getBankAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:41:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setBankAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setBankAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:43:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getTransactionDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getTransactionDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:44:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setTransactionDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setTransactionDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:46:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:47:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:49:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getDebitAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getDebitAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:50:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setDebitAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setDebitAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:52:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getCreditAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getCreditAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:53:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setCreditAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setCreditAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:55:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:56:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:58:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'isServiceFee' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'isServiceFee' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:59:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setServiceFee' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setServiceFee' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:61:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getStatementPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getStatementPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:62:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setStatementPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setStatementPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:64:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getSourceFile' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getSourceFile' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:65:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setSourceFile' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setSourceFile' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:67:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:68:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:70:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:71:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:73:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getAccountNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getAccountNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:74:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setAccountNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setAccountNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:76:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:77:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:79:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:80:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:82:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:83:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'setAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'setAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:85:5: Class 'BankTransaction' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransaction' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:87:35: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:88:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:89:56: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:90:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:91:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:92:50: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:93:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:94:64: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:95:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:96:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:97:60: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BankTransaction.java:98:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:22:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'getProcessedCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'getProcessedCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:23:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'setProcessedCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'setProcessedCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:25:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'getClassifiedCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'getClassifiedCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:26:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'setClassifiedCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'setClassifiedCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:28:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'getFailedCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'getFailedCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:29:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'setFailedCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'setFailedCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:31:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'isSuccess' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'isSuccess' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingResult.java:32:5: Class 'BatchProcessingResult' looks like designed for extension (can be subclassed), but the method 'setSuccess' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingResult' final or making the method 'setSuccess' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:25:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'getTotalTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'getTotalTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:26:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'setTotalTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'setTotalTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:28:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'getClassifiedTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'getClassifiedTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:29:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'setClassifiedTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'setClassifiedTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:31:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'getUnclassifiedTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'getUnclassifiedTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:32:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'setUnclassifiedTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'setUnclassifiedTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:34:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'getClassificationRate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'getClassificationRate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BatchProcessingStatistics.java:35:5: Class 'BatchProcessingStatistics' looks like designed for extension (can be subclassed), but the method 'setClassificationRate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BatchProcessingStatistics' final or making the method 'setClassificationRate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:31:24: 'companyId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:31:42: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:31:57: 'budgetYear' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:43:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:44:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:44:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:46:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:47:35: 'companyId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:47:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:49:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:50:40: 'fiscalPeriodId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:50:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:52:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:53:33: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:53:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:55:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:56:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:56:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:58:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getBudgetYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getBudgetYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:59:39: 'budgetYear' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:59:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setBudgetYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setBudgetYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:61:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:62:34: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:62:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:64:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getTotalRevenue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getTotalRevenue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:65:44: 'totalRevenue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:65:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setTotalRevenue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setTotalRevenue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:67:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getTotalExpenses' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getTotalExpenses' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:68:45: 'totalExpenses' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:68:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setTotalExpenses' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setTotalExpenses' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:70:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:71:44: 'createdAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:71:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:73:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:74:44: 'updatedAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:74:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:76:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getApprovedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getApprovedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:77:45: 'approvedAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:77:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setApprovedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setApprovedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:79:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getApprovedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getApprovedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:80:38: 'approvedBy' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:80:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setApprovedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setApprovedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:82:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getCategories' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getCategories' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:86:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'setCategories' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'setCategories' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:86:52: 'categories' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:91:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'getNetBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'getNetBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Budget.java:95:5: Class 'Budget' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Budget' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:26:32: 'budgetId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:26:49: 'name' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:26:62: 'categoryType' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:35:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:36:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:36:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:38:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getBudgetId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getBudgetId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:39:34: 'budgetId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:39:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setBudgetId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setBudgetId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:41:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:42:32: 'name' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:42:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:44:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getCategoryType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getCategoryType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:45:40: 'categoryType' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:45:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setCategoryType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setCategoryType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:47:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:48:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:48:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:50:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getAllocatedPercentage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getAllocatedPercentage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:51:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setAllocatedPercentage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setAllocatedPercentage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:51:51: 'allocatedPercentage' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:53:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getTotalAllocated' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getTotalAllocated' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:54:46: 'totalAllocated' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:54:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setTotalAllocated' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setTotalAllocated' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:56:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:57:44: 'createdAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:57:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:59:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'getItems' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'getItems' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:63:43: 'items' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:63:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'setItems' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'setItems' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetCategory.java:67:5: Class 'BudgetCategory' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetCategory' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:22:28: 'budgetCategoryId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:22:53: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:22:77: 'annualAmount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:31:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:32:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:32:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:34:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getBudgetCategoryId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getBudgetCategoryId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:35:42: 'budgetCategoryId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:35:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setBudgetCategoryId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setBudgetCategoryId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:37:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:38:35: 'accountId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:38:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:40:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:41:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:41:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:43:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getAnnualAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getAnnualAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:44:44: 'annualAmount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:44:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setAnnualAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setAnnualAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:46:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getNotes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getNotes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:47:33: 'notes' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:47:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setNotes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setNotes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:49:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:50:44: 'createdAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:50:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:52:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:53:44: 'updatedAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:53:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetItem.java:55:5: Class 'BudgetItem' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetItem' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:23:41: 'budgetItemId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:23:63: 'monthNumber' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:23:87: 'allocatedAmount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:33:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:34:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:34:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:36:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getBudgetItemId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getBudgetItemId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:37:38: 'budgetItemId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:37:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setBudgetItemId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setBudgetItemId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:39:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getMonthNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getMonthNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:40:40: 'monthNumber' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:40:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setMonthNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setMonthNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:42:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getAllocatedAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getAllocatedAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:43:47: 'allocatedAmount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:43:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setAllocatedAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setAllocatedAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:45:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getActualAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getActualAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:46:44: 'actualAmount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:46:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setActualAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setActualAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:48:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getVarianceAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getVarianceAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:49:46: 'varianceAmount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:49:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setVarianceAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setVarianceAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:51:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getNotes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getNotes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:52:33: 'notes' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:52:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setNotes' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setNotes' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:54:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:55:44: 'createdAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:55:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:57:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:58:44: 'updatedAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:58:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:61:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'getMonthName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'getMonthName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:64:74: '12' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:64:77: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:68:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'isOverBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'isOverBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:69:64: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:73:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'isUnderBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'isUnderBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:74:64: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/BudgetMonthlyAllocation.java:78:5: Class 'BudgetMonthlyAllocation' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BudgetMonthlyAllocation' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:20:5: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:21:5: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'setAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'setAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:23:5: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:24:5: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'setAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'setAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:26:5: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getClassificationReason' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getClassificationReason' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/ClassificationResult.java:27:5: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'setClassificationReason' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'setClassificationReason' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:100:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:101:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:102:70: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:103:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:70:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:71:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:73:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:74:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:76:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getRegistrationNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getRegistrationNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:77:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setRegistrationNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setRegistrationNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:79:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getTaxNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getTaxNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:80:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setTaxNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setTaxNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:82:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getAddress' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getAddress' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:83:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setAddress' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setAddress' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:85:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getContactEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getContactEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:86:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setContactEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setContactEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:88:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getContactPhone' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getContactPhone' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:89:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setContactPhone' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setContactPhone' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:91:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getLogoPath' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getLogoPath' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:92:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setLogoPath' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setLogoPath' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:94:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:95:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:97:5: Class 'Company' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Company' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Company.java:99:27: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/CompanyId.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationMethod.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationMethod.java:14:31: 'code' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationMethod.java:14:44: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:108:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'getCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'getCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:112:36: 'cost' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:112:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'setCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'setCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:116:48: 'cost' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:116:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'cost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'cost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:121:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'getSalvageValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'getSalvageValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:125:44: 'salvageValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:125:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'setSalvageValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'setSalvageValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:129:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'salvageValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'salvageValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:129:56: 'salvageValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:134:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'getUsefulLife' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'getUsefulLife' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:138:35: 'usefulLife' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:138:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'setUsefulLife' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'setUsefulLife' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:142:47: 'usefulLife' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:142:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'usefulLife' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'usefulLife' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:147:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'getMethod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'getMethod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:151:46: 'method' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:151:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'setMethod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'setMethod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:155:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'method' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'method' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:155:58: 'method' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:160:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'getDbFactor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'getDbFactor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:164:40: 'dbFactor' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:164:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'setDbFactor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'setDbFactor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:168:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'dbFactor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'dbFactor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:168:52: 'dbFactor' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:173:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'getConvention' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'getConvention' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:177:38: 'convention' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:177:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'setConvention' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'setConvention' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:181:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'convention' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'convention' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:181:50: 'convention' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:186:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:188:39: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:189:32: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:190:50: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:191:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:192:38: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:193:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:194:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:198:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:20:43: 'cost' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:20:60: 'salvageValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:20:78: 'usefulLife' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:200:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:201:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:205:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:206:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:207:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:208:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:209:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:21:49: 'method' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:21:68: 'dbFactor' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:21:85: 'convention' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:213:5: Class 'DepreciationRequest' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationRequest' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:216:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:217:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:218:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:219:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:220:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:38:40: 'cost' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:38:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'cost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'cost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:43:48: 'salvageValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:43:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'salvageValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'salvageValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:48:39: 'usefulLife' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:48:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'usefulLife' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'usefulLife' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:53:50: 'method' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:53:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'method' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'method' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:58:44: 'dbFactor' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:58:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'dbFactor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'dbFactor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:63:42: 'convention' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:63:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'convention' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'convention' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:68:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'build' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'build' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationRequest.java:98:30: '50' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:101:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:105:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:105:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:109:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:113:36: 'cost' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:113:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:117:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getSalvageValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getSalvageValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:121:44: 'salvageValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:121:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setSalvageValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setSalvageValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:125:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getUsefulLifeYears' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getUsefulLifeYears' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:129:40: 'usefulLifeYears' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:129:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setUsefulLifeYears' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setUsefulLifeYears' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:133:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getDepreciationMethod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getDepreciationMethod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:137:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setDepreciationMethod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setDepreciationMethod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:137:58: 'depreciationMethod' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:141:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getDbFactor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getDbFactor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:145:40: 'dbFactor' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:145:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setDbFactor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setDbFactor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:149:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getConvention' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getConvention' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:153:38: 'convention' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:153:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setConvention' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setConvention' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:157:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:161:34: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:161:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:165:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:169:37: 'createdBy' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:169:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:173:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getCalculationDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getCalculationDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:177:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setCalculationDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setCalculationDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:177:50: 'calculationDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:182:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getYears' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getYears' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:186:49: 'years' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:186:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setYears' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setYears' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:191:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getTotalDepreciation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getTotalDepreciation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:195:49: 'totalDepreciation' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:195:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setTotalDepreciation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setTotalDepreciation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:199:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getFinalBookValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getFinalBookValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:203:46: 'finalBookValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:203:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setFinalBookValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setFinalBookValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:207:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getUsefulLife' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getUsefulLife' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:211:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'addYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'addYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:219:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:246:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:248:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:249:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:253:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:254:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:255:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:256:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:257:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:258:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:259:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:260:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:261:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:262:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:263:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:264:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:265:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:266:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:267:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:268:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:273:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:276:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:277:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:278:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:279:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:280:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:281:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:282:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:283:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:284:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:285:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:286:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:287:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:288:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:289:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:290:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:291:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:44:56: 'years' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:69:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:73:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:73:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:77:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getAssetId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getAssetId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:81:33: 'assetId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:81:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setAssetId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setAssetId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:85:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getScheduleNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getScheduleNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:89:42: 'scheduleNumber' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:89:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setScheduleNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setScheduleNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:93:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'getScheduleName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'getScheduleName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:97:40: 'scheduleName' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationSchedule.java:97:5: Class 'DepreciationSchedule' looks like designed for extension (can be subclassed), but the method 'setScheduleName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationSchedule' final or making the method 'setScheduleName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:18:33: 'year' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:18:50: 'depreciation' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:19:39: 'cumulativeDepreciation' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:19:74: 'bookValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:27:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'getYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'getYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:31:29: 'year' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:31:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'setYear' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'setYear' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:35:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'getDepreciation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'getDepreciation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:39:44: 'depreciation' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:39:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'setDepreciation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'setDepreciation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:43:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'getCumulativeDepreciation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'getCumulativeDepreciation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:47:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'setCumulativeDepreciation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'setCumulativeDepreciation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:47:54: 'cumulativeDepreciation' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:51:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'getBookValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'getBookValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:55:41: 'bookValue' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:55:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'setBookValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'setBookValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:59:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:65:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:67:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:68:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:72:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:73:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:74:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:79:5: Class 'DepreciationYear' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DepreciationYear' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:82:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:83:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/DepreciationYear.java:84:18: '31' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:102:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getFullName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getFullName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:106:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getDisplayName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getDisplayName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:110:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'isCurrentEmployee' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'isCurrentEmployee' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:115:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:116:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:118:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:119:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:121:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getEmployeeNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getEmployeeNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:122:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setEmployeeNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setEmployeeNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:124:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:125:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:127:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:128:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:130:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getSecondName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getSecondName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:131:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setSecondName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setSecondName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:133:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:134:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:136:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:137:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:139:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getPhone' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getPhone' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:140:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setPhone' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setPhone' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:142:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getPosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getPosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:143:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setPosition' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setPosition' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:145:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getDepartment' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getDepartment' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:146:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setDepartment' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setDepartment' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:148:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getHireDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getHireDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:149:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setHireDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setHireDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:151:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getTerminationDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getTerminationDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:152:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setTerminationDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setTerminationDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:154:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'isActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'isActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:155:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:158:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getAddressLine1' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getAddressLine1' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:159:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setAddressLine1' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setAddressLine1' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:161:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getAddressLine2' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getAddressLine2' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:162:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setAddressLine2' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setAddressLine2' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:164:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:165:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:167:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getProvince' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getProvince' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:168:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setProvince' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setProvince' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:170:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getPostalCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getPostalCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:171:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setPostalCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setPostalCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:173:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getCountry' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getCountry' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:174:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setCountry' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setCountry' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:177:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getBankName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getBankName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:178:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setBankName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setBankName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:180:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getAccountHolderName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getAccountHolderName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:181:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setAccountHolderName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setAccountHolderName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:183:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getAccountNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getAccountNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:184:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setAccountNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setAccountNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:186:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getBranchCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getBranchCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:187:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setBranchCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setBranchCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:189:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:190:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setAccountType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setAccountType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:193:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getEmploymentType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getEmploymentType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:194:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setEmploymentType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setEmploymentType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:196:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getSalaryType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getSalaryType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:197:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setSalaryType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setSalaryType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:199:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getBasicSalary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getBasicSalary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:200:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setBasicSalary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setBasicSalary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:202:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getOvertimeRate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getOvertimeRate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:203:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setOvertimeRate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setOvertimeRate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:206:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getTaxNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getTaxNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:207:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setTaxNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setTaxNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:209:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getTaxRebateCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getTaxRebateCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:210:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setTaxRebateCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setTaxRebateCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:212:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getUifNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getUifNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:213:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setUifNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setUifNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:215:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getMedicalAidNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getMedicalAidNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:216:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setMedicalAidNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setMedicalAidNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:218:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getPensionFundNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getPensionFundNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:219:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setPensionFundNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setPensionFundNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:222:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:223:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:225:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:226:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:228:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:229:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:231:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'getUpdatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'getUpdatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:232:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'setUpdatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'setUpdatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:234:5: Class 'Employee' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Employee' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:236:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:237:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:238:62: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:239:55: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:240:50: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:241:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:242:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Employee.java:243:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:46:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:47:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:49:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:50:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:52:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'getPeriodName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'getPeriodName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:53:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setPeriodName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setPeriodName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:55:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'getStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'getStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:56:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:58:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'getEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'getEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:59:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:61:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'isClosed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'isClosed' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:62:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setClosed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setClosed' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:64:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:65:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:67:5: Class 'FiscalPeriod' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriod' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:69:32: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:70:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:71:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:72:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:73:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:74:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriod.java:75:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/FiscalPeriodId.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:103:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:107:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:111:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getTransactionTypeId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getTransactionTypeId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:115:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setTransactionTypeId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setTransactionTypeId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:119:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:123:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:127:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:131:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:135:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:139:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:143:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:147:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:151:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:155:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:159:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getLines' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getLines' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:163:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setLines' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setLines' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:167:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:169:32: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:170:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:171:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:172:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:173:56: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:174:53: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:175:55: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:176:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:79:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:83:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:87:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:91:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:95:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'getEntryDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'getEntryDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntry.java:99:5: Class 'JournalEntry' looks like designed for extension (can be subclassed), but the method 'setEntryDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntry' final or making the method 'setEntryDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:23:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:27:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:31:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'getJournalEntryId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'getJournalEntryId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:35:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'setJournalEntryId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'setJournalEntryId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:39:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'getAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'getAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:43:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'setAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'setAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:47:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:51:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:55:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'getDebitAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'getDebitAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:59:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'setDebitAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'setDebitAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:63:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'getCreditAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'getCreditAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLine.java:67:5: Class 'JournalEntryLine' looks like designed for extension (can be subclassed), but the method 'setCreditAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLine' final or making the method 'setCreditAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:100:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getCreditAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getCreditAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:104:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setCreditAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setCreditAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:28:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getLineId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getLineId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:32:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setLineId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setLineId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:36:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getJournalEntryId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getJournalEntryId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:40:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setJournalEntryId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setJournalEntryId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:44:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getEntryDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getEntryDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:48:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setEntryDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setEntryDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:52:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:56:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:60:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:64:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:68:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:72:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setAccountId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setAccountId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:76:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:80:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:84:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:88:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:92:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'getDebitAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'getDebitAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/JournalEntryLineDetail.java:96:5: Class 'JournalEntryLineDetail' looks like designed for extension (can be subclassed), but the method 'setDebitAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JournalEntryLineDetail' final or making the method 'setDebitAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Money.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Money.java:18:29: 'amount' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:100:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'build' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'build' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:65:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'type' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'type' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:70:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'description' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'description' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:75:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'amount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'amount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:80:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'date' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'date' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:85:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'reference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'reference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:90:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'balance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'balance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/parser/ParsedTransaction.java:95:9: Class 'Builder' looks like designed for extension (can be subclassed), but the method 'hasServiceFee' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'hasServiceFee' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:100:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:102:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getPeriodType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getPeriodType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:103:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setPeriodType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setPeriodType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:105:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:106:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:108:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getTotalGrossPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getTotalGrossPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:109:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setTotalGrossPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setTotalGrossPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:111:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getTotalDeductions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getTotalDeductions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:112:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setTotalDeductions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setTotalDeductions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:114:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getTotalNetPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getTotalNetPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:115:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setTotalNetPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setTotalNetPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:117:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getEmployeeCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getEmployeeCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:118:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setEmployeeCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setEmployeeCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:121:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getProcessedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getProcessedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:122:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setProcessedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setProcessedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:124:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getProcessedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getProcessedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:125:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setProcessedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setProcessedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:127:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getApprovedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getApprovedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:128:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setApprovedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setApprovedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:130:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getApprovedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getApprovedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:131:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setApprovedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setApprovedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:134:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:135:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:137:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:138:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:140:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:141:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:143:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:145:33: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:146:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:147:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:148:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:149:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:150:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:151:38: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:152:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:153:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:68:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'canBeProcessed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'canBeProcessed' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:72:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'canBeApproved' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'canBeApproved' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:76:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'isActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'isActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:81:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:82:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:84:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:85:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:87:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:88:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setFiscalPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setFiscalPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:90:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getPeriodName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getPeriodName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:91:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setPeriodName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setPeriodName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:93:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getPayDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getPayDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:94:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setPayDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setPayDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:96:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:97:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'setStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'setStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/PayrollPeriod.java:99:5: Class 'PayrollPeriod' looks like designed for extension (can be subclassed), but the method 'getEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollPeriod' final or making the method 'getEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:122:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'canBeApproved' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'canBeApproved' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:126:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'canBePaid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'canBePaid' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:131:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:132:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:134:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:135:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:137:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getEmployeeId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getEmployeeId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:138:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setEmployeeId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setEmployeeId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:140:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPayrollPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPayrollPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:141:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPayrollPeriodId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPayrollPeriodId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:143:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPayslipNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPayslipNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:144:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPayslipNumber' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPayslipNumber' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:147:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getBasicSalary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getBasicSalary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:148:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setBasicSalary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setBasicSalary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:153:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getOvertimeHours' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getOvertimeHours' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:154:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setOvertimeHours' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setOvertimeHours' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:159:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getOvertimeAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getOvertimeAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:160:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setOvertimeAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setOvertimeAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:166:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getGrossSalary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getGrossSalary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:167:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setGrossSalary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setGrossSalary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:172:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getHousingAllowance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getHousingAllowance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:173:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setHousingAllowance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setHousingAllowance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:178:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getTransportAllowance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getTransportAllowance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:179:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setTransportAllowance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setTransportAllowance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:184:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getMedicalAllowance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getMedicalAllowance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:185:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setMedicalAllowance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setMedicalAllowance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:190:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getOtherAllowances' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getOtherAllowances' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:191:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setOtherAllowances' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setOtherAllowances' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:196:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getCommission' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getCommission' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:197:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setCommission' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setCommission' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:202:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getBonus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getBonus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:203:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setBonus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setBonus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:208:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getTotalEarnings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getTotalEarnings' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:209:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setTotalEarnings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setTotalEarnings' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:212:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPayeeTax' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPayeeTax' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:213:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPayeeTax' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPayeeTax' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:218:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getUifEmployee' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getUifEmployee' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:219:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setUifEmployee' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setUifEmployee' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:224:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getUifEmployer' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getUifEmployer' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:225:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setUifEmployer' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setUifEmployer' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:227:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getSdlLevy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getSdlLevy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:228:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setSdlLevy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setSdlLevy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:230:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getMedicalAid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getMedicalAid' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:231:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setMedicalAid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setMedicalAid' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:236:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPensionFund' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPensionFund' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:237:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPensionFund' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPensionFund' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:242:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getLoanDeduction' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getLoanDeduction' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:243:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setLoanDeduction' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setLoanDeduction' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:248:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getOtherDeductions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getOtherDeductions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:249:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setOtherDeductions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setOtherDeductions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:254:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getTotalDeductions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getTotalDeductions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:255:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setTotalDeductions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setTotalDeductions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:257:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getNetPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getNetPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:258:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setNetPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setNetPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:261:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getAnnualGross' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getAnnualGross' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:262:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setAnnualGross' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setAnnualGross' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:264:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getAnnualPaye' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getAnnualPaye' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:265:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setAnnualPaye' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setAnnualPaye' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:267:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getAnnualUif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getAnnualUif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:268:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setAnnualUif' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setAnnualUif' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:271:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:272:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:274:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPaymentMethod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPaymentMethod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:275:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPaymentMethod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPaymentMethod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:277:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPaymentDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPaymentDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:278:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPaymentDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPaymentDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:280:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getPaymentReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getPaymentReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:281:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setPaymentReference' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setPaymentReference' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:284:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:285:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:287:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:288:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:290:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'getCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'getCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:291:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'setCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'setCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:293:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:295:27: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:296:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:297:60: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:298:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:299:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:300:56: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:301:38: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:302:38: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Payslip.java:98:5: Class 'Payslip' looks like designed for extension (can be subclassed), but the method 'calculateTotals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Payslip' final or making the method 'calculateTotals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:100:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:101:56: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:102:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:103:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:104:56: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:105:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:19:37: 'strategicPriorityId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:19:65: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:19:79: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:20:110: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:20:38: 'startDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:20:56: 'endDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:20:86: 'budgetAllocated' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:31:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:35:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:35:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:39:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getStrategicPriorityId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getStrategicPriorityId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:43:45: 'strategicPriorityId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:43:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setStrategicPriorityId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setStrategicPriorityId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:47:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:51:33: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:51:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:55:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:59:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:59:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:63:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:67:37: 'startDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:67:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:71:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:75:35: 'endDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:75:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:79:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getBudgetAllocated' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getBudgetAllocated' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:83:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setBudgetAllocated' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setBudgetAllocated' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:83:57: 'budgetAllocated' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:87:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:91:34: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:91:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:95:5: Class 'StrategicInitiative' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicInitiative' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:97:39: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:98:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicInitiative.java:99:64: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:18:36: 'strategicInitiativeId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:18:66: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:18:80: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:19:37: 'targetDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:19:56: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:28:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:32:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:32:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:36:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getStrategicInitiativeId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getStrategicInitiativeId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:40:47: 'strategicInitiativeId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:40:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setStrategicInitiativeId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setStrategicInitiativeId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:44:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:48:33: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:48:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:52:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:56:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:56:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:60:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getTargetDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getTargetDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:64:38: 'targetDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:64:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setTargetDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setTargetDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:68:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getCompletionDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getCompletionDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:72:42: 'completionDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:72:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setCompletionDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setCompletionDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:76:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:80:34: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:80:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:84:5: Class 'StrategicMilestone' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicMilestone' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:86:38: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:87:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:88:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:89:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:90:56: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:91:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:92:62: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicMilestone.java:93:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:26:31: 'companyId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:26:49: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:35:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:36:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:36:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:38:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:39:35: 'companyId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:39:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:41:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:42:33: 'title' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:42:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setTitle' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setTitle' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:44:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getVisionStatement' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getVisionStatement' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:45:43: 'visionStatement' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:45:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setVisionStatement' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setVisionStatement' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:47:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getMissionStatement' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getMissionStatement' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:48:44: 'missionStatement' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:48:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setMissionStatement' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setMissionStatement' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:50:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getGoals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getGoals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:51:33: 'goals' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:51:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setGoals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setGoals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:53:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:54:34: 'status' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:54:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setStatus' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setStatus' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:56:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:57:40: 'startDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:57:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setStartDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setStartDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:59:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:60:38: 'endDate' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:60:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setEndDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setEndDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:62:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:63:44: 'createdAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:63:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:65:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:66:44: 'updatedAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:66:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPlan.java:68:5: Class 'StrategicPlan' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPlan' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:20:35: 'strategicPlanId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:20:59: 'name' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:20:73: 'priorityOrder' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:28:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:29:28: 'id' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:29:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:31:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'getStrategicPlanId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'getStrategicPlanId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:32:41: 'strategicPlanId' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:32:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'setStrategicPlanId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'setStrategicPlanId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:34:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:35:32: 'name' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:35:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:37:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:38:39: 'description' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:38:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:40:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'getPriorityOrder' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'getPriorityOrder' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:41:42: 'priorityOrder' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:41:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'setPriorityOrder' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'setPriorityOrder' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:43:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:44:44: 'createdAt' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:44:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/StrategicPriority.java:46:5: Class 'StrategicPriority' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StrategicPriority' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:22:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:23:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:25:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:26:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:28:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'getAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'getAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:29:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'setAmount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'setAmount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:31:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'getDebitCredit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'getDebitCredit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/Transaction.java:32:5: Class 'Transaction' looks like designed for extension (can be subclassed), but the method 'setDebitCredit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Transaction' final or making the method 'setDebitCredit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionId.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:110:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getRuleName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getRuleName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:114:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setRuleName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setRuleName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:118:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:122:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:126:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getMatchType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getMatchType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:130:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setMatchType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setMatchType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:134:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getMatchValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getMatchValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:138:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setMatchValue' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setMatchValue' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:142:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:156:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:170:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'isActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'isActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:174:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:178:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getPriority' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getPriority' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:182:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setPriority' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setPriority' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:186:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:190:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:194:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:198:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:231:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:70:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:74:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:78:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'getCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'getCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TransactionMappingRule.java:94:5: Class 'TransactionMappingRule' looks like designed for extension (can be subclassed), but the method 'setCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TransactionMappingRule' final or making the method 'setCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:102:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:61:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:65:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:69:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getNormalBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getNormalBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:73:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getOpeningBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getOpeningBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:77:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getPeriodDebits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getPeriodDebits' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:81:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getPeriodCredits' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getPeriodCredits' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:85:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getClosingBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getClosingBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:90:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getDebitBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getDebitBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:94:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getCreditBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getCreditBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/TrialBalanceEntry.java:98:5: Class 'TrialBalanceEntry' looks like designed for extension (can be subclassed), but the method 'getNetBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TrialBalanceEntry' final or making the method 'getNetBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:100:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:102:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:103:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setUpdatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setUpdatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:105:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:106:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setCreatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setCreatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:108:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getUpdatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getUpdatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:109:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setUpdatedBy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setUpdatedBy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:111:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getLastLoginAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getLastLoginAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:112:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setLastLoginAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setLastLoginAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:115:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'isAdmin' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'isAdmin' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:119:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'isUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'isUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:123:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:125:24: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:126:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:127:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:128:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:129:50: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:130:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:131:44: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:132:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:68:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:69:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:71:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:72:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:74:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getPasswordHash' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getPasswordHash' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:75:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setPasswordHash' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setPasswordHash' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:77:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getSalt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getSalt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:78:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setSalt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setSalt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:80:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:81:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:83:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:84:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:86:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getFullName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getFullName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:90:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getRole' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getRole' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:91:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setRole' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setRole' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:93:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:94:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:96:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'isActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'isActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:97:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'setActive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'setActive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/model/User.java:99:5: Class 'User' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:141:5: Method createDetailedAccount length is 75 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:168:87: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:169:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:170:73: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:266:5: Class 'AccountRepository' looks like designed for extension (can be subclassed), but the method 'getCategoryIdForAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AccountRepository' final or making the method 'getCategoryIdForAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:3:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:52:5: Method getOrCreateDetailedAccount length is 78 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:82:87: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:83:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:84:73: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/AccountRepository.java:85:75: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:101:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'delete' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'delete' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:108:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'deleteById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'deleteById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:122:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'exists' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'exists' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:156:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'findByCompanyAndFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'findByCompanyAndFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:177:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'findByDateRange' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'findByDateRange' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:21:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'save' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'save' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:23:50: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:24:242: ':' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:4:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:62:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'findById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'findById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BankTransactionRepository.java:82:5: Class 'BankTransactionRepository' looks like designed for extension (can be subclassed), but the method 'findAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionRepository' final or making the method 'findAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:110:152: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:118:28: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:119:28: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:120:32: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:121:32: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:122:31: '7' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:165:142: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:173:28: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:174:32: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:175:28: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:176:31: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:177:31: '7' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:20:36: 'dbUrl' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:243:175: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:251:32: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:252:32: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:253:32: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:254:28: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:255:31: '7' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:256:31: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:28:172: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:337:31: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:338:26: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:348:74: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:349:75: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:350:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:36:28: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:37:28: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:38:25: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:39:28: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:40:32: '7' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:41:32: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:42:31: '9' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:43:31: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/BudgetRepository.java:9:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:116:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'findAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'findAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:135:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'delete' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'delete' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:142:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'deleteById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'deleteById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:156:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'exists' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'exists' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:192:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'findByName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'findByName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:29:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:54:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'save' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'save' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:56:46: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:57:156: ':' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/CompanyRepository.java:90:5: Class 'CompanyRepository' looks like designed for extension (can be subclassed), but the method 'findById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyRepository' final or making the method 'findById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FinancialDataRepository.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FinancialDataRepository.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FinancialDataRepository.java:5:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FinancialDataRepository.java:6:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:100:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'delete' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'delete' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:107:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'deleteById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'deleteById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:121:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'exists' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'exists' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:148:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'findByCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'findByCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:168:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'findActiveByCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'findActiveByCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:27:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'save' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'save' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:29:45: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:30:124: ':' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:4:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:61:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'findById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'findById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/FiscalPeriodRepository.java:81:5: Class 'FiscalPeriodRepository' looks like designed for extension (can be subclassed), but the method 'findAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodRepository' final or making the method 'findAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcBaseRepository.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcBaseRepository.java:3:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcBaseRepository.java:4:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:134:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getJournalEntries' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getJournalEntries' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:164:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:187:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:212:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getOpeningBalance' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getOpeningBalance' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:212:5: Method getOpeningBalance length is 82 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:28:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getBankTransactions' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getBankTransactions' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:296:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getTrialBalanceEntries' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getTrialBalanceEntries' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:296:5: Method getTrialBalanceEntries length is 58 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:342:72: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:343:70: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:356:5: Method getAccountOpeningBalance length is 85 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:477:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getActiveAccountsFromJournals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getActiveAccountsFromJournals' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:5:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:517:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getAccountOpeningBalanceForLedger' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getAccountOpeningBalanceForLedger' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:557:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getJournalEntryLinesForAccount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getJournalEntryLinesForAccount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:557:5: Method getJournalEntryLinesForAccount length is 51 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:56:5: Class 'JdbcFinancialDataRepository' looks like designed for extension (can be subclassed), but the method 'getAccountBalancesByType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'JdbcFinancialDataRepository' final or making the method 'getAccountBalancesByType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:56:5: Method getAccountBalancesByType length is 76 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/JdbcFinancialDataRepository.java:6:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:100:28: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:101:25: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:102:31: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:16:47: 'dbUrl' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:24:171: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:32:28: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:33:28: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:34:28: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:35:28: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:36:26: '7' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:37:26: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:38:31: '9' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:39:31: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:6:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/StrategicPlanningRepository.java:92:125: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:10:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:113:5: Class 'UserRepository' looks like designed for extension (can be subclassed), but the method 'findAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserRepository' final or making the method 'findAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:132:5: Class 'UserRepository' looks like designed for extension (can be subclassed), but the method 'deleteById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserRepository' final or making the method 'deleteById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:147:5: Class 'UserRepository' looks like designed for extension (can be subclassed), but the method 'exists' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserRepository' final or making the method 'exists' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:163:5: Class 'UserRepository' looks like designed for extension (can be subclassed), but the method 'delete' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserRepository' final or making the method 'delete' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:43:5: Class 'UserRepository' looks like designed for extension (can be subclassed), but the method 'save' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserRepository' final or making the method 'save' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:45:43: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:46:191: ':' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/repository/UserRepository.java:92:5: Class 'UserRepository' looks like designed for extension (can be subclassed), but the method 'findById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserRepository' final or making the method 'findById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:17:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:172:62: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:184:67: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:309:9: Class 'AuthResult' looks like designed for extension (can be subclassed), but the method 'isSuccess' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AuthResult' final or making the method 'isSuccess' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:310:9: Class 'AuthResult' looks like designed for extension (can be subclassed), but the method 'getMessage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AuthResult' final or making the method 'getMessage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:311:9: Class 'AuthResult' looks like designed for extension (can be subclassed), but the method 'getSessionToken' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AuthResult' final or making the method 'getSessionToken' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:330:9: Class 'Session' looks like designed for extension (can be subclassed), but the method 'getUser' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Session' final or making the method 'getUser' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:331:9: Class 'Session' looks like designed for extension (can be subclassed), but the method 'getToken' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Session' final or making the method 'getToken' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:332:9: Class 'Session' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Session' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:333:9: Class 'Session' looks like designed for extension (can be subclassed), but the method 'getLastActivity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Session' final or making the method 'getLastActivity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:335:9: Class 'Session' looks like designed for extension (can be subclassed), but the method 'updateLastActivity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Session' final or making the method 'updateLastActivity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/security/AuthService.java:339:9: Class 'Session' looks like designed for extension (can be subclassed), but the method 'isExpired' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Session' final or making the method 'isExpired' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountClassificationService.java:206:115: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountClassificationService.java:259:113: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountClassificationService.java:528:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountClassificationService.java:529:41: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountClassificationService.java:530:42: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:40:79: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:41:71: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:42:45: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:43:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:44:54: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:45:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:46:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:47:64: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:48:48: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:49:47: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:6:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:7:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:84:74: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:85:75: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:86:32: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:87:66: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:88:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountManagementService.java:89:62: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/AccountService.java:5:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BalanceSheetService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BalanceSheetService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BalanceSheetService.java:70:5: Method generateBalanceSheet length is 115 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BankStatementParsingService.java:57:5: Method parseTransactions length is 74 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BankStatementParsingService.java:9:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BankStatementProcessingService.java:176:5: Method parseTransactions length is 65 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BankStatementProcessingService.java:291:66: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BankStatementProcessingService.java:8:26: Using the '.*' form of import should be avoided - fin.service.parser.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:133:5: Method generateStrategicPlanReport length is 58 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:195:5: Method generateBudgetVsActualReport length is 53 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:264:85: '120f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:268:111: '180f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:284:83: '20f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:288:103: '150f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:292:82: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:294:68: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:303:83: '18f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:312:109: '80f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:319:85: '80f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:323:114: '120f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:338:83: '20f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:342:112: '150f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:346:91: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:348:77: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:358:83: '18f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:362:115: '120f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:366:90: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:368:76: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:377:83: '18f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:432:5: Method getBudgetData length is 72 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:482:84: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:505:5: Method getStrategicPlanData length is 97 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:553:102: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:578:102: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:579:102: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:631:27: 'budget' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:631:56: 'categories' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:631:85: 'items' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:648:41: 'plan' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:648:71: 'priorities' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:649:52: 'initiatives' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:649:90: 'milestones' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetReportService.java:72:5: Method generateBudgetSummaryReport length is 57 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetService.java:154:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetService.java:18:59: 'context' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/BudgetService.java:4:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashbookService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashbookService.java:108:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashbookService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashbookService.java:32:5: Method generateCashbook length is 70 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashFlowService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashFlowService.java:152:5: Method calculateCashFlows length is 67 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashFlowService.java:223:5: Method generateCashFlow length is 84 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashFlowService.java:313:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CashFlowService.java:4:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:6:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:7:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:83:91: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:84:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:85:69: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CategoryManagementService.java:86:66: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:137:5: Method createRule length is 74 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:6:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:7:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:75:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:76:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getCompanyId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getCompanyId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:77:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getPattern' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getPattern' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:78:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getKeywords' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getKeywords' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:79:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:80:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:81:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getUsageCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getUsageCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:82:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getCreatedAt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getCreatedAt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationRuleManager.java:83:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getLastUsed' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getLastUsed' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationUIHandler.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationUIHandler.java:124:91: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ClassificationUIHandler.java:9:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyLogoService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyLogoService.java:189:57: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyLogoService.java:198:65: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:106:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'createFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'createFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:107:100: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:141:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodsByCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'getFiscalPeriodsByCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:171:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'getAllCompanies' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'getAllCompanies' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:201:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'getCompanyById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'getCompanyById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:242:97: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:243:101: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:294:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'getFiscalPeriodById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:31:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:323:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'getFiscalPeriodByName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'getFiscalPeriodByName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:69:5: Class 'CompanyService' looks like designed for extension (can be subclassed), but the method 'createCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyService' final or making the method 'createCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CompanyService.java:70:96: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvExportService.java:108:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvExportService.java:21:5: Class 'CsvExportService' looks like designed for extension (can be subclassed), but the method 'exportTransactionsToCsv' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CsvExportService' final or making the method 'exportTransactionsToCsv' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvExportService.java:21:5: Method exportTransactionsToCsv length is 75 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvExportService.java:98:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:12:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:141:77: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:211:100: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:230:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:346:90: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:362:87: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:374:75: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:376:89: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:393:99: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:401:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:402:75: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:408:104: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:437:103: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/CsvImportService.java:438:98: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:144:87: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:145:92: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:203:79: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:237:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:238:70: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:260:92: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:286:82: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:287:94: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:303:100: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:332:28: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:333:58: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:334:58: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:335:53: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:336:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:337:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:338:66: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:339:61: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:340:43: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:4:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:6:17: Using the '.*' form of import should be avoided - java.time.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:7:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:70:5: Method resetCompanyData length is 61 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DataManagementService.java:78:86: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DepreciationService.java:207:97: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:134:64: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:135:61: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:136:46: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:137:47: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:138:48: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:139:43: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:140:37: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:145:38: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:146:41: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:147:46: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:148:40: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:149:38: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:150:47: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:152:109: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:153:70: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:154:72: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:72:44: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:73:49: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:74:55: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:75:63: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/DocumentTextExtractor.java:76:66: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/EmailService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/EmailService.java:234:9: Class 'EmailSendResult' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'EmailSendResult' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/EmailService.java:3:18: Using the '.*' form of import should be avoided - javax.mail.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/EmailService.java:4:27: Using the '.*' form of import should be avoided - javax.mail.internet.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ExcelFinancialReportService.java:220:5: Method createBalanceSheet length is 113 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ExcelFinancialReportService.java:334:5: Method createIncomeStatement length is 60 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ExcelFinancialReportService.java:4:35: Using the '.*' form of import should be avoided - org.apache.poi.ss.usermodel.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ExcelFinancialReportService.java:7:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/FinancialReportingService.java:14:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/FinancialReportingService.java:18:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/FinancialReportingService.java:211:5: Class 'FinancialReportingService' looks like designed for extension (can be subclassed), but the method 'generateAuditTrail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FinancialReportingService' final or making the method 'generateAuditTrail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/FinancialReportingService.java:211:5: Method generateAuditTrail length is 107 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/FinancialReportingService.java:292:106: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:142:5: Method generateAccountLedger length is 85 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:218:108: ':' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:252:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:260:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/GeneralLedgerService.java:87:5: Method getAccountClosingBalances length is 51 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/IncomeStatementService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/IncomeStatementService.java:167:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/IncomeStatementService.java:175:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/IncomeStatementService.java:181:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/IncomeStatementService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/IncomeStatementService.java:56:5: Method generateIncomeStatement length is 105 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:1222:78: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:1309:96: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:1343:74: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:139:9: Class 'ChangeRecord' looks like designed for extension (can be subclassed), but the method 'getTransactionId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeRecord' final or making the method 'getTransactionId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:1540:113: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:1561:122: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:165:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getPattern' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getPattern' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:166:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getKeywords' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getKeywords' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:167:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:168:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:169:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getUsageCount' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getUsageCount' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:170:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'getConfidenceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'getConfidenceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:171:9: Class 'ClassificationRule' looks like designed for extension (can be subclassed), but the method 'setConfidenceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationRule' final or making the method 'setConfidenceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:188:9: Class 'ClassifiedTransaction' looks like designed for extension (can be subclassed), but the method 'getTransaction' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassifiedTransaction' final or making the method 'getTransaction' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:189:9: Class 'ClassifiedTransaction' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassifiedTransaction' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:190:9: Class 'ClassifiedTransaction' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassifiedTransaction' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:216:9: Class 'ClassificationInput' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationInput' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:217:9: Class 'ClassificationInput' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationInput' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:218:9: Class 'ClassificationInput' looks like designed for extension (can be subclassed), but the method 'shouldQuit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationInput' final or making the method 'shouldQuit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:219:9: Class 'ClassificationInput' looks like designed for extension (can be subclassed), but the method 'hasClassification' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationInput' final or making the method 'hasClassification' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:220:9: Class 'ClassificationInput' looks like designed for extension (can be subclassed), but the method 'shouldSkip' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationInput' final or making the method 'shouldSkip' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:8:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/InteractiveClassificationService.java:9:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/JournalEntryGenerator.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/JournalEntryGenerator.java:215:5: Method createJournalEntryLines length is 57 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/JournalEntryGenerator.java:9:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/Libharu.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/OpeningBalanceService.java:4:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/OpeningBalanceService.java:44:5: Method createOpeningBalanceEntry length is 62 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/CreditTransactionParser.java:25:5: Class 'CreditTransactionParser' looks like designed for extension (can be subclassed), but the method 'canParse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CreditTransactionParser' final or making the method 'canParse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/CreditTransactionParser.java:27:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/CreditTransactionParser.java:29:51: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/CreditTransactionParser.java:30:42: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/CreditTransactionParser.java:35:5: Class 'CreditTransactionParser' looks like designed for extension (can be subclassed), but the method 'parse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CreditTransactionParser' final or making the method 'parse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/ServiceFeeParser.java:17:5: Class 'ServiceFeeParser' looks like designed for extension (can be subclassed), but the method 'canParse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ServiceFeeParser' final or making the method 'canParse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/ServiceFeeParser.java:19:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/ServiceFeeParser.java:25:126: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/ServiceFeeParser.java:29:86: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/ServiceFeeParser.java:35:5: Class 'ServiceFeeParser' looks like designed for extension (can be subclassed), but the method 'parse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ServiceFeeParser' final or making the method 'parse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:165:5: Class 'StandardBankTabularParser' looks like designed for extension (can be subclassed), but the method 'parse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StandardBankTabularParser' final or making the method 'parse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:403:93: '<=' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:58:72: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:59:63: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:60:75: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:61:61: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:62:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/parser/StandardBankTabularParser.java:92:5: Class 'StandardBankTabularParser' looks like designed for extension (can be subclassed), but the method 'canParse' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StandardBankTabularParser' final or making the method 'canParse' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:103:5: Method generatePayrollSummaryReport length is 51 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:219:5: Method calculatePayrollSummaryData length is 56 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:435:77: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:436:93: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:437:103: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:627:5: Method generateEMP201Report length is 120 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:752:32: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:753:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:754:64: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:755:73: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:756:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:757:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:758:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:759:66: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:760:37: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:761:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollReportService.java:762:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1019:58: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1028:58: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1073:58: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1143:82: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1147:5: Class 'PayrollService' looks like designed for extension (can be subclassed), but the method 'getPayrollPeriodById' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollService' final or making the method 'getPayrollPeriodById' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:14:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1402:90: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1403:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1404:80: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:1405:84: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:17:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:20:15: Using the '.*' form of import should be avoided - java.io.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:257:72: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:258:51: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:262:5: Class 'PayrollService' looks like designed for extension (can be subclassed), but the method 'getCompanyRepository' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollService' final or making the method 'getCompanyRepository' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:266:5: Class 'PayrollService' looks like designed for extension (can be subclassed), but the method 'getPayslipPdfService' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PayrollService' final or making the method 'getPayslipPdfService' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:569:106: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:767:100: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayrollService.java:9:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:192:32: 'page' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:192:44: 'marginLeft' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:192:62: 'contentWidth' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:192:84: 'font' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:192:98: 'boldFont' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:116: 'contentWidth' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:138: 'boldFont' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:38: 'page' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:52: 'company' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:69: 'logo' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:81: 'pageWidth' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:216:98: 'marginLeft' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:31:101: 'marginTop' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:31:118: 'contentWidth' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:31:29: 'pageWidth' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:31:46: 'pageHeight' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:31:64: 'marginLeft' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:31:82: 'marginRight' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:52:26: 'regularFont' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PayslipPdfService.java:52:47: 'boldFont' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfExportService.java:104:66: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfExportService.java:153:5: Method addTableRow length is 57 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfExportService.java:218:5: Method addSummary length is 55 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfExportService.java:3:25: Using the '.*' form of import should be avoided - com.itextpdf.text.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfExportService.java:4:29: Using the '.*' form of import should be avoided - com.itextpdf.text.pdf.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:101:55: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:109:27: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:130:57: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:130:77: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:130:80: '18' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:136:53: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:136:66: '15' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:142:25: '30' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:148:5: Method drawTable length is 60 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:175:36: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:178:72: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:185:36: '1.5f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:196:34: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:199:76: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:207:27: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:218:43: '0.95f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:218:56: '0.95f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:223:36: '1.5f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:230:36: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:234:61: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:239:77: '120' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:247:39: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:254:41: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:258:53: '15' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:258:67: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:264:57: '15' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:264:71: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:270:53: '15' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:270:67: '25' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:281:46: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:283:58: '20' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:321:27: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:353:27: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:49:5: Method drawHeaderSection length is 61 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:56:55: '140' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:56:75: '140' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:65:45: '5' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:65:59: '35' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:65:79: '10' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:65:83: '30' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:71:45: '8' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:73:58: '25' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:77:21: '50' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:82:57: '6' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:89:36: '1.5f' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:90:51: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:91:70: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfFormattingUtils.java:95:21: '30' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfPrintService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfPrintService.java:32:5: Class 'PdfPrintService' looks like designed for extension (can be subclassed), but the method 'generateSimplePayslipPdf' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PdfPrintService' final or making the method 'generateSimplePayslipPdf' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfPrintService.java:54:5: Method createSimplePdf length is 94 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/PdfPrintService.java:59:77: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:107:5: Method generateGeneralLedgerReport length is 82 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:156:61: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:158:63: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:193:5: Method generateTrialBalanceReport length is 70 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:267:5: Method generateIncomeStatementReport length is 79 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:41:5: Method generateCashbookReport length is 62 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:7:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:75:65: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:77:67: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:79:63: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/ReportService.java:9:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:134:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'calculateUIF' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'calculateUIF' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:157:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'findPAYE' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'findPAYE' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:198:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'calculateNetPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'calculateNetPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:216:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'printCalculation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'printCalculation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:226:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'printAllBrackets' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'printAllBrackets' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:234:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'getTaxBrackets' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'getTaxBrackets' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:3:15: Using the '.*' form of import should be avoided - java.io.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:4:21: Using the '.*' form of import should be avoided - java.nio.file.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:5:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:54:9: Class 'TaxBracket' looks like designed for extension (can be subclassed), but the method 'getLower' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TaxBracket' final or making the method 'getLower' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:58:9: Class 'TaxBracket' looks like designed for extension (can be subclassed), but the method 'getUpper' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TaxBracket' final or making the method 'getUpper' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:6:23: Using the '.*' form of import should be avoided - java.util.regex.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:62:9: Class 'TaxBracket' looks like designed for extension (can be subclassed), but the method 'getTax' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TaxBracket' final or making the method 'getTax' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:66:9: Class 'TaxBracket' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TaxBracket' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:72:5: Class 'SARSTaxCalculator' looks like designed for extension (can be subclassed), but the method 'loadTaxTablesFromPDFText' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'SARSTaxCalculator' final or making the method 'loadTaxTablesFromPDFText' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/SARSTaxCalculator.java:82:147: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:115:68: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:116:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:117:65: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:125:109: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:126:124: '4' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:19:70: 'context' hides a field. [HiddenField]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/StrategicPlanningService.java:47:51: '3' is a magic number. [MagicNumber]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionBatchProcessor.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionBatchProcessor.java:183:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionBatchProcessor.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionBatchProcessor.java:4:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionBatchProcessor.java:49:5: Method processBatch length is 62 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:185:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:249:5: Method findSimilarUnclassifiedTransactions length is 52 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:306:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:7:16: Using the '.*' form of import should be avoided - java.sql.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:77:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getAccountCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getAccountCode' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:78:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getAccountName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getAccountName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:79:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getConfidenceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getConfidenceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:8:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:80:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'getMatchingRule' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'getMatchingRule' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:81:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'isAutoClassified' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'isAutoClassified' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:82:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'isHighConfidence' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'isHighConfidence' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionClassificationEngine.java:83:9: Class 'ClassificationResult' looks like designed for extension (can be subclassed), but the method 'isMediumConfidence' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassificationResult' final or making the method 'isMediumConfidence' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:123:97: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:155:5: Method reclassifyAllTransactions length is 85 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:215:103: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:279:77: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:453:5: Method loadTransactionMappingRules length is 61 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TransactionProcessingService.java:67:5: Method classifyAllUnclassifiedTransactions length is 80 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:117:83: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:125:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:131:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:132:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:3:17: Using the '.*' form of import should be avoided - fin.model.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/service/TrialBalanceService.java:51:5: Method generateTrialBalance length is 60 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:104:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'requireFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'requireFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:110:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'requireContext' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'requireContext' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:116:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'getStateDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'getStateDescription' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:129:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'isStateValid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'isStateValid' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:133:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:23:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'setCurrentCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'setCurrentCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:26:61: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:32:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'getCurrentCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'getCurrentCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:36:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'hasCurrentCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'hasCurrentCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:41:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'setCurrentFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'setCurrentFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:42:60: '&&' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:49:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'getCurrentFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'getCurrentFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:53:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'hasCurrentFiscalPeriod' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'hasCurrentFiscalPeriod' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:57:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'hasRequiredContext' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'hasRequiredContext' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:62:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'setSessionData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'setSessionData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:66:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'getSessionData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'getSessionData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:75:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'getSessionData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'getSessionData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:79:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'hasSessionData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'hasSessionData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:83:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'removeSessionData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'removeSessionData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:87:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'clearSession' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'clearSession' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:91:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'clearAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'clearAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/state/ApplicationState.java:98:5: Class 'ApplicationState' looks like designed for extension (can be subclassed), but the method 'requireCompany' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ApplicationState' final or making the method 'requireCompany' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/TestDatabaseSetup.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:122:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayFooter' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayFooter' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:127:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayPayrollMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayPayrollMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:138:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayEmployeeMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayEmployeeMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:148:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayPayrollPeriodMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayPayrollPeriodMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:15:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayMainMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayMainMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:156:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayPayrollReportsMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayPayrollReportsMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:165:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayPayrollSetupMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayPayrollSetupMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:176:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayBudgetMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayBudgetMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:186:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayStrategicPlanningMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayStrategicPlanningMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:196:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayBudgetCreationMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayBudgetCreationMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:206:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayBudgetReportsMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayBudgetReportsMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:33:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayCompanyMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayCompanyMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:44:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayFiscalPeriodMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayFiscalPeriodMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:53:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayReportMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayReportMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:66:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayDataManagementMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayDataManagementMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:79:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayImportMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayImportMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:87:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayTransactionClassificationMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayTransactionClassificationMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/ConsoleMenu.java:99:5: Class 'ConsoleMenu' looks like designed for extension (can be subclassed), but the method 'displayAccountInitializationMenu' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ConsoleMenu' final or making the method 'displayAccountInitializationMenu' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:105:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getFilePath' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getFilePath' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:118:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getChoice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getChoice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:133:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getConfirmation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getConfirmation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:139:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'isValidFilePath' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'isValidFilePath' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:147:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'isValidFilePath' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'isValidFilePath' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:154:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'isValidDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'isValidDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:163:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'isValidEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'isValidEmail' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:167:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'isNumeric' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'isNumeric' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:176:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'waitForEnter' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'waitForEnter' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:181:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'waitForEnter' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'waitForEnter' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:21:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:26:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:32:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getOptionalString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getOptionalString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:38:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getInteger' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getInteger' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:49:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getInteger' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getInteger' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:59:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:71:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getDate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getDate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:81:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getBigDecimal' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getBigDecimal' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/InputHandler.java:92:5: Class 'InputHandler' looks like designed for extension (can be subclassed), but the method 'getBoolean' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputHandler' final or making the method 'getBoolean' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:150:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printTransactionSummary' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printTransactionSummary' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:176:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printCompanyDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printCompanyDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:185:52: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:187:43: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:189:40: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:191:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:193:46: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:197:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printFiscalPeriodDetails' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printFiscalPeriodDetails' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:206:43: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:208:41: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:213:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printTransactionTable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printTransactionTable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:223:65: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:225:67: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:227:63: '?' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:245:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printCurrentContext' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printCurrentContext' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:252:85: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:253:71: '+' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:259:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printFileLocation' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printFileLocation' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:34:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printSuccess' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printSuccess' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:38:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printError' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printError' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:42:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printWarning' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printWarning' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:46:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printInfo' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printInfo' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:50:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printProcessing' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printProcessing' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:54:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printPlain' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printPlain' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:58:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printHeader' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printHeader' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:69:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printSubHeader' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printSubHeader' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:75:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printSeparator' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printSeparator' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:79:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printDoubleSeparator' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printDoubleSeparator' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:83:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printProgress' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printProgress' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/ui/OutputFormatter.java:97:5: Class 'OutputFormatter' looks like designed for extension (can be subclassed), but the method 'printTable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputFormatter' final or making the method 'printTable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:160:83: '||' should be on a new line. [OperatorWrap]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:190:9: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:4:35: Using the '.*' form of import should be avoided - org.apache.poi.ss.usermodel.*. [AvoidStarImport]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:40:5: Class 'ExcelTemplateReader' looks like designed for extension (can be subclassed), but the method 'analyzeTemplate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ExcelTemplateReader' final or making the method 'analyzeTemplate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:70:5: Method analyzeSheet length is 70 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:80:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/util/ExcelTemplateReader.java:86:13: 'if' construct must use '{}'s. [NeedBraces]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/BankTransactionValidator.java:11:5: Class 'BankTransactionValidator' looks like designed for extension (can be subclassed), but the method 'validate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BankTransactionValidator' final or making the method 'validate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/BankTransactionValidator.java:11:5: Method validate length is 54 lines (max allowed is 50). [MethodLength]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/CompanyValidator.java:14:5: Class 'CompanyValidator' looks like designed for extension (can be subclassed), but the method 'validate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'CompanyValidator' final or making the method 'validate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/FiscalPeriodValidator.java:11:5: Class 'FiscalPeriodValidator' looks like designed for extension (can be subclassed), but the method 'validate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'FiscalPeriodValidator' final or making the method 'validate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/ValidationResult.java:16:5: Class 'ValidationResult' looks like designed for extension (can be subclassed), but the method 'addError' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ValidationResult' final or making the method 'addError' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/ValidationResult.java:20:5: Class 'ValidationResult' looks like designed for extension (can be subclassed), but the method 'isValid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ValidationResult' final or making the method 'isValid' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/ValidationResult.java:24:5: Class 'ValidationResult' looks like designed for extension (can be subclassed), but the method 'getErrors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ValidationResult' final or making the method 'getErrors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/ValidationResult.java:37:9: Class 'ValidationError' looks like designed for extension (can be subclassed), but the method 'getField' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ValidationError' final or making the method 'getField' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ant:checkstyle] [WARN] /Users/sthwalonyoni/FIN/app/src/main/java/fin/validation/ValidationResult.java:41:9: Class 'ValidationError' looks like designed for extension (can be subclassed), but the method 'getMessage' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ValidationError' final or making the method 'getMessage' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
