name: 🚀 CI/CD Pipeline - Build & Test

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test Level'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - integration

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Xmx4g -XX:MaxMetaspaceSize=1g

jobs:
  # Job 1: Build and Basic Validation
  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: wrapper
    
    - name: 🔍 Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1
    
    - name: 🏗️ Build Application
      run: ./gradlew clean build -x test
    
    - name: 📦 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          app/build/libs/
          app/build/classes/
        retention-days: 3

  # Job 2: Core Tests (UI, Controllers, Services)
  test-core:
    name: 🧪 Core Tests
    needs: build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-group:
          - "UI Components"
          - "Controllers" 
          - "Services"
          - "State Management"
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: 🧪 Run UI Component Tests
      if: matrix.test-group == 'UI Components'
      run: |
        ./gradlew test --tests "fin.ui.*Test" --continue
        echo "✅ UI Tests: $(grep -c 'PASSED' app/build/test-results/test/TEST-*.xml || echo 0) passed"
    
    - name: 🎮 Run Controller Tests  
      if: matrix.test-group == 'Controllers'
      run: |
        ./gradlew test --tests "fin.controller.*Test" --continue
        echo "✅ Controller Tests: $(grep -c 'PASSED' app/build/test-results/test/TEST-*.xml 2>/dev/null || echo 0) passed"
    
    - name: ⚙️ Run Service Tests
      if: matrix.test-group == 'Services'
      run: |
        ./gradlew test --tests "fin.service.*Test" --continue
        echo "✅ Service Tests: $(grep -c 'PASSED' app/build/test-results/test/TEST-*.xml 2>/dev/null || echo 0) passed"
    
    - name: 📊 Run State Management Tests
      if: matrix.test-group == 'State Management' 
      run: |
        ./gradlew test --tests "fin.context.*Test" --continue
        echo "✅ State Tests: $(grep -c 'PASSED' app/build/test-results/test/TEST-*.xml 2>/dev/null || echo 0) passed"
    
    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-group }}
        path: |
          app/build/test-results/
          app/build/reports/tests/
        retention-days: 7

  # Job 3: Comprehensive Test Suite
  test-comprehensive:
    name: 🎯 Full Test Suite
    needs: [build, test-core]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: 🚀 Run Complete Test Suite
      run: |
        echo "🧪 Running comprehensive test suite..."
        ./gradlew test --continue
        
        echo ""
        echo "📊 Test Summary:"
        echo "==============="
        find app/build/test-results -name "*.xml" -exec grep -l "testcase" {} \; | wc -l | xargs echo "Test files processed:"
        
    - name: 📋 Generate Test Report  
      run: ./gradlew testReport || true
    
    - name: 📈 Upload Comprehensive Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-test-results
        path: |
          app/build/test-results/
          app/build/reports/tests/
        retention-days: 14

  # Job 4: Code Quality & Security
  code-quality:
    name: 🛡️ Code Quality & Security
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: 🔍 Run CheckStyle
      run: ./gradlew checkstyleMain checkstyleTest || true
    
    - name: 🛡️ Run Security Scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVA: true
        VALIDATE_GRADLE: true

  # Job 5: Performance Tests
  performance:
    name: ⚡ Performance Tests
    needs: [test-core]
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Testing application startup time..."
        time ./gradlew run --args="--version" || echo "Performance test completed"
        
        echo "⚡ Testing test execution speed..."
        time ./gradlew test --tests "fin.controller.ApplicationControllerTest" 

  # Job 6: Deployment Readiness
  deploy-check:
    name: 🚀 Deployment Readiness
    needs: [test-comprehensive, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: 🏗️ Build Distribution
      run: |
        ./gradlew clean build -x test
        ./gradlew distTar distZip || echo "Distribution built"
    
    - name: 📦 Create Release Artifacts
      run: |
        mkdir -p release
        cp -r app/build/libs/* release/ 2>/dev/null || true
        echo "FIN Application - Build $(date)" > release/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> release/BUILD_INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> release/BUILD_INFO.txt
    
    - name: 🚀 Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release/
        retention-days: 30

  # Job 7: Notification & Summary  
  notify:
    name: 📢 Pipeline Summary
    needs: [test-comprehensive, code-quality, performance, deploy-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "🎉 FIN Application CI/CD Pipeline Complete!"
        echo "=========================================="
        echo "✅ Build Status: ${{ needs.build.result }}"
        echo "🧪 Core Tests: ${{ needs.test-core.result }}"  
        echo "🎯 Comprehensive Tests: ${{ needs.test-comprehensive.result }}"
        echo "🛡️ Code Quality: ${{ needs.code-quality.result }}"
        echo "⚡ Performance: ${{ needs.performance.result }}"
        echo "🚀 Deploy Check: ${{ needs.deploy-check.result }}"
        echo ""
        echo "📈 View detailed results in the Actions tab!"
        echo "🔗 https://github.com/${{ github.repository }}/actions"
