name: 🚀 CI/CD Pipeline - Build & Test

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Xmx4g -XX:MaxMetaspaceSize=1g
  # Test database configuration for CI (matches local test.env)
  TEST_DATABASE_URL: jdbc:postgresql://localhost:5432/drimacc_test
  TEST_DATABASE_USER: postgres
  TEST_DATABASE_PASSWORD: postgres

jobs:
  # Job 1: Build and Validation
  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: drimacc_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle
    
    - name: 🧹 Verify gradle.properties (bust cache if needed)
      run: |
        echo "📋 Current gradle.properties content:"
        cat gradle.properties
        echo "🗑️ Clearing any cached Gradle daemon..."
        rm -rf ~/.gradle/daemon/ || true

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        cache-read-only: false

    - name: 🔍 Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v2
    
    - name: 🗄️ Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: 🗄️ Setup Test Database
      run: |
        echo "🗄️ Setting up test database schema..."
        ./gradlew runTestDatabaseSetup --no-daemon
        echo "✅ Test database setup completed"
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 🏗️ Build Application (with tests)
      run: ./gradlew build -x checkstyleMain -x checkstyleTest --no-daemon
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 📦 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          app/build/libs/
          app/build/classes/
        retention-days: 3
    
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-build
        path: |
          app/build/test-results/
          app/build/reports/tests/
        retention-days: 7

  # Job 2: Comprehensive Test Suite
  test:
    name: 🧪 Test Suite
    needs: build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: drimacc_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        test_profile:
          - unit
          - integration
      fail-fast: false

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: 🗄️ Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: 🗄️ Setup Test Database
      run: |
        echo "🗄️ Setting up test database schema..."
        ./gradlew runTestDatabaseSetup --no-daemon
        echo "✅ Test database setup completed"
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 🧪 Run Unit Tests
      if: matrix.test_profile == 'unit'
      run: |
        echo "🧪 Running unit tests..."
        ./gradlew test --no-daemon --continue || true
        echo "✅ Unit tests completed"
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 🔗 Run Integration Tests
      if: matrix.test_profile == 'integration'
      run: |
        echo "🔗 Running integration tests..."
        ./gradlew integrationTest --no-daemon --continue || echo "⚠️ No integration tests found or some tests failed"
        echo "✅ Integration test phase completed"
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 📊 Generate Test Report
      run: ./gradlew testReport || true

    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test_profile }}
        path: |
          app/build/test-results/
          app/build/reports/tests/
        retention-days: 14

  # Job 3: Code Quality & Security
  quality:
    name: 🛡️ Code Quality
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🔍 Run Static Analysis
      run: |
        echo "🔍 Running checkstyle..."
        ./gradlew checkstyleMain checkstyleTest --no-daemon || echo "⚠️ Checkstyle found issues (non-blocking)"
        echo "🔍 Running SpotBugs..."
        ./gradlew spotbugsMain spotbugsTest --no-daemon || echo "⚠️ SpotBugs found issues (non-blocking)"
        echo "✅ Static analysis completed"
    
    - name: � Upload Static Analysis Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-reports
        path: |
          app/build/reports/checkstyle/
          app/build/reports/spotbugs/
        retention-days: 14

  # Job 4: Performance Baseline
  performance:
    name: ⚡ Performance Check
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Testing application startup..."
        time ./gradlew run --args="--version" --no-daemon --quiet || echo "Performance test completed"

        echo "⚡ Testing build performance..."
        time ./gradlew assemble --no-daemon --quiet

  # Job 5: Deploy Ready Check
  deploy:
    name: 🚀 Deploy Readiness
    needs: [test, quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: drimacc_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: 🗄️ Wait for PostgreSQL
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: 🗄️ Setup Test Database
      run: |
        echo "🗄️ Setting up test database schema..."
        ./gradlew runTestDatabaseSetup --no-daemon
        echo "✅ Test database setup completed"
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 🏗️ Build Distribution
      run: |
        ./gradlew clean build -x checkstyleMain -x checkstyleTest --no-daemon
        ./gradlew distTar distZip --no-daemon || echo "Distribution packages created"
      env:
        TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        TEST_DATABASE_USER: ${{ env.TEST_DATABASE_USER }}
        TEST_DATABASE_PASSWORD: ${{ env.TEST_DATABASE_PASSWORD }}

    - name: 📦 Create Release Artifacts
      run: |
        mkdir -p release
        cp -r app/build/libs/* release/ 2>/dev/null || true
        cp -r app/build/distributions/* release/ 2>/dev/null || true
        echo "FIN Application - Build $(date +%Y%m%d_%H%M%S)" > release/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> release/BUILD_INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> release/BUILD_INFO.txt
        echo "Java: ${{ env.JAVA_VERSION }}" >> release/BUILD_INFO.txt
        echo "PostgreSQL: Required for tests" >> release/BUILD_INFO.txt

    - name: 🚀 Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ github.run_number }}
        path: release/
        retention-days: 30

  # Job 6: Pipeline Summary
  summary:
    name: 📢 Pipeline Summary
    needs: [build, test, quality, performance, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "🎉 FIN Application CI/CD Pipeline Complete!"
        echo "=========================================="
        echo "✅ Build: ${{ needs.build.result }}"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🛡️ Quality: ${{ needs.quality.result }}"
        echo "⚡ Performance: ${{ needs.performance.result }}"
        echo "🚀 Deploy Check: ${{ needs.deploy.result }}"
        echo ""
        echo "📈 View detailed results: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        
        # Check critical jobs (build must succeed)
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ Build succeeded - application compiles and basic tests pass!"
          
          # Quality and test failures are warnings, not blockers
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "⚠️ Some tests failed or were skipped - review test reports"
          fi
          
          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "⚠️ Code quality checks have warnings - review static analysis reports"
          fi
          
          echo ""
          echo "✅ Pipeline PASSED - Application is buildable and deployable!"
          exit 0
        else
          echo "❌ Build FAILED - application does not compile"
          echo "❌ Pipeline FAILED - fix compilation errors before deploying"
          exit 1
        fi
