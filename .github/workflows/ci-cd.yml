name: 🚀 CI/CD Pipeline - Build & Test

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Xmx4g -XX:MaxMetaspaceSize=1g

jobs:
  # Job 1: Build and Validation
  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🔍 Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v2

    - name: 🏗️ Build Application
      run: ./gradlew build -x test --no-daemon

    - name: 📦 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          app/build/libs/
          app/build/classes/
        retention-days: 3

  # Job 2: Comprehensive Test Suite
  test:
    name: 🧪 Test Suite
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_profile:
          - unit
          - integration

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🧪 Run Unit Tests
      if: matrix.test_profile == 'unit'
      run: |
        echo "🧪 Running unit tests..."
        ./gradlew test --no-daemon --continue
        echo "✅ Unit tests completed"

    - name: 🔗 Run Integration Tests
      if: matrix.test_profile == 'integration'
      run: |
        echo "🔗 Running integration tests..."
        ./gradlew integrationTest --no-daemon --continue || echo "No integration tests found"
        echo "✅ Integration tests completed"

    - name: 📊 Generate Test Report
      run: ./gradlew testReport || true

    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test_profile }}
        path: |
          app/build/test-results/
          app/build/reports/tests/
        retention-days: 14

  # Job 3: Code Quality & Security
  quality:
    name: 🛡️ Code Quality
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🔍 Run Static Analysis
      run: |
        ./gradlew checkstyleMain checkstyleTest --no-daemon || true
        ./gradlew spotbugsMain --no-daemon || true

    - name: 🛡️ Run Security Scan
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVA: true
        VALIDATE_GRADLE: true
        VALIDATE_GITHUB_ACTIONS: true

  # Job 4: Performance Baseline
  performance:
    name: ⚡ Performance Check
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Testing application startup..."
        time ./gradlew run --args="--version" --no-daemon --quiet || echo "Performance test completed"

        echo "⚡ Testing build performance..."
        time ./gradlew assemble --no-daemon --quiet

  # Job 5: Deploy Ready Check
  deploy:
    name: 🚀 Deploy Readiness
    needs: [test, quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: gradle

    - name: 📋 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🏗️ Build Distribution
      run: |
        ./gradlew clean build -x test --no-daemon
        ./gradlew distTar distZip --no-daemon || echo "Distribution built"

    - name: 📦 Create Release Artifacts
      run: |
        mkdir -p release
        cp -r app/build/libs/* release/ 2>/dev/null || true
        cp -r app/build/distributions/* release/ 2>/dev/null || true
        echo "FIN Application - Build $(date +%Y%m%d_%H%M%S)" > release/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> release/BUILD_INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> release/BUILD_INFO.txt
        echo "Java: ${{ env.JAVA_VERSION }}" >> release/BUILD_INFO.txt

    - name: 🚀 Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ github.run_number }}
        path: release/
        retention-days: 30

  # Job 6: Pipeline Summary
  summary:
    name: 📢 Pipeline Summary
    needs: [build, test, quality, performance, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "🎉 FIN Application CI/CD Pipeline Complete!"
        echo "=========================================="
        echo "✅ Build: ${{ needs.build.result }}"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🛡️ Quality: ${{ needs.quality.result }}"
        echo "⚡ Performance: ${{ needs.performance.result }}"
        echo "🚀 Deploy Check: ${{ needs.deploy.result }}"
        echo ""
        echo "📈 View detailed results: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        # Check if all jobs passed
        if [[ "${{ needs.build.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.quality.result }}" == "success" ]]; then
          echo "✅ All quality gates passed!"
        else
          echo "❌ Some quality gates failed - check the logs"
          exit 1
        fi
